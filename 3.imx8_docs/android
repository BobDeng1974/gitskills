android代码包括三个部分：
1.IMX public source code
2.Android public source code
3.imx_android proprietary source code package

在/home/wtmecnxp/workstation/resource下imx-o8.0.0_1.3.0_8mq-prc.tar.gz
就是所谓的imx和android专有源码包(上面的第三点)。

一。
首先，要有repo。

为了防止后面可能出现的
----------------------------------------------------------------
repo init报错Cannot get https://gerrit.googlesource.com/git-repo/clone.bundle
----------------------------------------------------------------
这个错误，repo这样来下载：
++++++++++++++++++++++++++++++用的是清华的镜像++++++++++++++++++++++++++++++++++++++++++
+       mkdir ~/bin
+       cd ~/bin
+       curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo -o repo
+       chmod a+x repo
+       export PATH=${PATH}:~/bin    将repo加到环境变量PATH中

+       repo的运行过程中会尝试访问官方的git源更新自己，所以会出现上面的那个错误。
+       为了避免这个错误，那么使用tuna的镜像源进行更新，可以将如下内容复制到你的~/.bashrc里
+       export REPO_URL='https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/'

+   并重启终端。
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

二。
解压imx-o8.0.0_1.3.0_8mq-prc.tar.gz:
tar zxvf imx-o8.0.0_1.3.0_8mq-prc.tar.gz -C ~/workstation/imx8m/
进入~/workstation/imx8m/imx-o8.0.0_1.3.0_8mq-prc，
建议先看一下这个脚本：imx_android_setup.sh理解一下思路。

1.定义两个工作目录：
WORKSPACE=$PWD
android_builddir=$WORKSPACE/android_build

2.创建相关目录：
    mkdir $android_builddir
    cd $android_builddir

3.执行 repo init -u https://source.codeaurora.org/external/imx/imx-manifest.git -b imx-android-oreo -m imx-o8.0.0_1.3.0_8mq-prc.xml
在这里，如果不按照“一”里的内容来做，会出错。
  执行完成后，~/workstation/imx8M/android_build下有一个隐藏的.repo目录。
  .repo下有如下的文件和文件夹：
        manifests  manifests.git  manifest.xml  project-objects  projects  repo
  这里mainfest.xml同manifests/imx-o8.0.0_1.3.0_8mq-prc.xml内容一样。
  这就是为什么在repo init 指令中加上 -m 的原因。

4.rc=$? 
这个意思是：上个命令退出状态，或者函数返回值。

5.执行 repo sync
这里一定会出错。
无法连接https://android.googlesource.com的错。
打开manifest.xml，如果remote段的fetch地址是https://android.googlesource.com的，改为fetch="https://aosp.tuna.tsinghua.edu.cn"
我们在打开的manifest.xml中没有发现googlesource的地址。
但是发现<include name="aosp-O8.0.0-1.3.0.xml"/>
于是找到这个aosp-O8.0.0-1.3.0.xml文件，find . -name aosp-O8.0.0-1.3.0.xml
在./manifests/aosp-O8.0.0-1.3.0.xml
修改为：
    ----------------------------------------------
        <remote  name="aosp"
           fetch="https://aosp.tuna.tsinghua.edu.cn/"
    -------------------------------------------------

同时，修改 .repo/manifests.git/config，将
url = https://android.googlesource.com/platform/manifest
更改为
url = https://aosp.tuna.tsinghua.edu.cn/platform/manifest

如果.repo/manifests.git/config的“url”不是googlesource，
是url = https://source.codeaurora.org/external/imx/imx-manifest.git
或者其他的地址，用网页打开试一下，看能不能打开。如果能打开，那么url就不用改了。

保存后重新执行sync

6.执行剩下的：
cd $WORKSPACE/imx-o8.0.0_1.3.0_8mq-prc
cp -r vendor/nxp $android_builddir/vendor
cp -r EULA.txt $android_builddir
cp -r SCR* $android_builddir

cd $android_builddir

# unset variables

unset android_builddir
unset WORKSPACE

echo "Android source is ready for the build"

三。
上面第二部分分析了imx_android_setup.sh这个脚本。
真实的执行是这样的：
在/home/wtmecnxp/workstation/imx8M目录下执行source ./imx-o8.0.0_1.3.0_8mq-prc/imx_android_setup.sh
在报“无法连接https://android.googlesource.com”错误的时候，按照第二部分的第5点来修改。
修改完之后，重新回到目录/home/wtmecnxp/workstation/imx8M，执行source ./imx-o8.0.0_1.3.0_8mq-prc/imx_android_setup.sh
这里会花几个小时。

在执行的过程中会因为网络原因断开，
我写了一个脚本sourceinstall.sh：
        #!/bin/bash
	cd /home/wtmecnxp/workstation/imx8M
	source imx-o8.0.0_1.3.0_8mq-prc/imx_android_setup.sh
	rc=$?

	while [ "$rc" != 0 ]; do
    	    cd ..
    	    source imx-o8.0.0_1.3.0_8mq-prc/imx_android_setup.sh
    	    rc=$?
	done
	echo "finished!!!!!!!!!"
这个脚本会一遍一遍的执行source命令，直到完成所有操作。
当然也可以在imx-o8.0.0_1.3.0_8mq-prc/imx_android_setup.sh的repo sync命令处直接修改脚本，一旦无故退出，马上重新repo sync：
	rc=1
	while [ "$rc" != 0 ]; do
    	    repo sync
    	    rc=$?
	done
以上两种方法选一种实现。

以后每次单独repo sync代码如果因为网络的问题出错，用下面的脚本直接运行。
	--------------在~/workstation/imx8M/android_build下的reposyncscript.sh-----------------------
	|	#!/bin/bash
	|
	|	cd ~/workstation/imx8M/android_build
	|	rc=1
	|	while [ "$rc" != 0 ]; do
    	|	    sudo ~/bin/repo sync
    	|	    rc=$?
	|	done
	|	echo "repo sync finished!!!!!!!!"
	----------------------------------------------------------------------

四。
将~/workstation/imx8M/android_build作为默认工作目录
    export MY_ANDROID=~/workstation/imx8M/android_build
	------------------------------------以下这部分是对wifi校准----------------------------------------------
	|   The default release package does not include the 1CQ (QCA6174A) calibrated Wi-Fi firmware. 
	|   To use Wi-Fi, perform the following steps:
	|	1. Fetch murata's public git for the calibrated firmware.
	|	The github source URL is 
	|		https://github.com/murata-wireless/qca-linux-calibration.git, 
	|	and the branch for calibrated firmware is i.MX8x-1cq-morty.
	|	The destination path is external/qca-linux. 
	|	You can adjust the path, but you need to change the path in the next changes applied as well.
	|		$cd {$MYANDORID}/external
	|		$git clone https://github.com/murata-wireless/qca-linux-calibration.git -b i.MX8x-1cqmorty qca-linux

	|	2. Apply the following changes to ${MY_ANDROID}/device/fsl.
	|	
	|		diff --git a/imx8/evk_8mq.mk b/imx8/evk_8mq.mk
	|		index c7aafe3..e056503 100644
	|		--- a/imx8/evk_8mq.mk
	|		+++ b/imx8/evk_8mq.mk
	|		@@ -136,9 +136,9 @@ PRODUCT_PACKAGES += \
	|		# Qcom WiFi Firmware
	|		PRODUCT_COPY_FILES += \
	|		- $(IMX_FIRMWARE_PATH)/linux-firmware/qca/nvm_00130302.bin:vendor/firmware/
	|		nvm_tlv_3.2.bin \
	|		+ external/qca-linux/1CQ/nvm_tlv_3.2.bin:vendor/firmware/nvm_tlv_3.2.bin \
	|		+ external/qca-linux/1CQ/board.bin:vendor/firmware/ath10k/QCA6174/hw3.0/board.bin \
	|		$(IMX_FIRMWARE_PATH)/linux-firmware/qca/rampatch_00130302.bin:vendor/firmware/
	|		rampatch_tlv_3.2.tlv \
	|		- $(IMX_FIRMWARE_PATH)/linux-firmware/ath10k/QCA6174/hw3.0/board.bin:vendor/
	|		firmware/ath10k/QCA6174/hw3.0/board.bin \
	|		$(IMX_FIRMWARE_PATH)/linux-firmware/ath10k/QCA6174/hw3.0/board-2.bin:vendor/
	|		firmware/ath10k/QCA6174/hw3.0/board-2.bin \
	|		$(IMX_FIRMWARE_PATH)/linux-firmware/ath10k/QCA6174/hw3.0/firmware-4.bin:vendor/
	|		firmware/ath10k/QCA6174/hw3.0/firmware-4.bin
	----------------------------------------------------------------------------------------------------------------------

五。
Build Name is the Android device name found in ${MY_ANDROID}/device/fsl
编译：
	-------------------------出现权限问题，用su来编译----------------------	
	|	cd ${MY_ANDROID}
	|	source build/envsetup.sh
	|	lunch evk_8mq-userdebug        //or evk_8mq-user,evk_8mq-eng
	|	make 2>&1 | tee build-log.txt
	----------------------------------------------------------------------



